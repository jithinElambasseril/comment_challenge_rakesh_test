
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using NUnit.Framework;

namespace comments_challenge.CandidateTests
{
    /// <summary>
    /// !!! WARNING 
    /// !!! Project structure test.
    /// !!! DON'T CHANGE IT! 
    /// !!! Changes may cause the solution to be rejected.
    /// </summary>
    public class ELStructureTest
    {
        [SetUp]
        public void Setup()
        {
        }

        /// <summary>
        /// !!! WARNING 
        /// !!! Project structure test.
        /// !!! DON'T CHANGE IT! 
        /// !!! Changes may cause the solution to be rejected.
        /// </summary>
        [Test]
        public void StructureTest()
        {
            
            Assembly assembly;
            Type type;
            Type methodReturnType;
            MethodInfo method;
            int methodsCount;
            ParameterInfo parameter;
            int parametersCount;
            int constructorsCount;
            List<string> constructorParameterNameTypeDictionary;
            ConstructorInfo constructor;
            int fieldsCount;
            FieldInfo field;
            Type fieldReturnType;
            PropertyInfo property;
            int propertiesCount;
            Type propertyReturnType;
            assembly = Assembly.Load(Decode("RUwsIFZlcnNpb249MS4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1udWxs") /*"EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"*/ );
            Assert.IsNotNull(assembly, "Missing  EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("RUwuQ29tbWVudA==") /*"EL.Comment"*/ );
                Assert.IsNotNull(type, "Missing assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment");
                    Assert.IsTrue(type.IsClass, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment is not class");
                    Assert.IsTrue(type.IsPublic, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment is not public class");
                        constructorParameterNameTypeDictionary = new List<string>();
                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                            Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment() does not exists");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q29tbWVudElk") /*"CommentId"*/ );
                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Int32 CommentId does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbW1lbnRJZA==") /*"get_CommentId"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CommentId() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CommentId() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CommentId() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbW1lbnRJZA==") /*"get_CommentId"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CommentId() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CommentId() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CommentId() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Int32 CommentId  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXNlcklk") /*"UserId"*/ );
                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Int32 UserId does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_UserId() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_UserId() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_UserId() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_UserId() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_UserId() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_UserId() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Int32 UserId  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("UG9zdElk") /*"PostId"*/ );
                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Int32 PostId does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Bvc3RJZA==") /*"get_PostId"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_PostId() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_PostId() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_PostId() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Bvc3RJZA==") /*"get_PostId"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_PostId() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_PostId() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_PostId() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Int32 PostId  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q29udGVudA==") /*"Content"*/ );
                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.String Content does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbnRlbnQ=") /*"get_Content"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Content() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Content() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Content() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbnRlbnQ=") /*"get_Content"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Content() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Content() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Content() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.String Content  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q3JlYXRlZEF0") /*"CreatedAt"*/ );
                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.DateTime CreatedAt does not exists");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CreatedAt() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CreatedAt() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CreatedAt() return type has changed");
                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CreatedAt() does not exists");
                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CreatedAt() is not public");
                                methodReturnType = method.ReturnType;
                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_CreatedAt() return type has changed");
                            propertyReturnType = property.PropertyType;
                            Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.DateTime CreatedAt  type has changed");
                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXBkYXRlZEF0") /*"UpdatedAt"*/ );
                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Nullable`1 UpdatedAt does not exists");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXNlcg==") /*"User"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.User User does not exists");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXI=") /*"get_User"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_User() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_User() is not public");
                                    Assert.IsTrue(method.IsVirtual, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_User() is not virtual");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("EL.User",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_User() return type has changed");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXI=") /*"get_User"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_User() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_User() is not public");
                                    Assert.IsTrue(method.IsVirtual, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_User() is not virtual");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("EL.User",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_User() return type has changed");
                                propertyReturnType = property.PropertyType;
                                Assert.AreEqual("EL.User",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.User User  type has changed");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("UG9zdA==") /*"Post"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Post Post does not exists");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Bvc3Q=") /*"get_Post"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Post() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Post() is not public");
                                    Assert.IsTrue(method.IsVirtual, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Post() is not virtual");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("EL.Post",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Post() return type has changed");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Bvc3Q=") /*"get_Post"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Post() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Post() is not public");
                                    Assert.IsTrue(method.IsVirtual, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Post() is not virtual");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("EL.Post",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.get_Post() return type has changed");
                                propertyReturnType = property.PropertyType;
                                Assert.AreEqual("EL.Post",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Comment.Post Post  type has changed");

                    type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("RUwuUG9zdA==") /*"EL.Post"*/ );
                    Assert.IsNotNull(type, "Missing assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post");
                        Assert.IsTrue(type.IsClass, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post is not class");
                        Assert.IsTrue(type.IsPublic, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post is not public class");
                            constructorParameterNameTypeDictionary = new List<string>();
                                constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                                Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post() does not exists");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("UG9zdElk") /*"PostId"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.Int32 PostId does not exists");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Bvc3RJZA==") /*"get_PostId"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_PostId() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_PostId() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_PostId() return type has changed");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Bvc3RJZA==") /*"get_PostId"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_PostId() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_PostId() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_PostId() return type has changed");
                                propertyReturnType = property.PropertyType;
                                Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.Int32 PostId  type has changed");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXNlcklk") /*"UserId"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.Int32 UserId does not exists");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_UserId() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_UserId() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_UserId() return type has changed");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_UserId() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_UserId() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_UserId() return type has changed");
                                propertyReturnType = property.PropertyType;
                                Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.Int32 UserId  type has changed");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXNlcg==") /*"User"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.User User does not exists");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXI=") /*"get_User"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_User() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_User() is not public");
                                    Assert.IsTrue(method.IsVirtual, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_User() is not virtual");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("EL.User",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_User() return type has changed");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXI=") /*"get_User"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_User() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_User() is not public");
                                    Assert.IsTrue(method.IsVirtual, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_User() is not virtual");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("EL.User",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_User() return type has changed");
                                propertyReturnType = property.PropertyType;
                                Assert.AreEqual("EL.User",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.User User  type has changed");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VGl0bGU=") /*"Title"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.String Title does not exists");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1RpdGxl") /*"get_Title"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Title() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Title() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Title() return type has changed");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1RpdGxl") /*"get_Title"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Title() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Title() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Title() return type has changed");
                                propertyReturnType = property.PropertyType;
                                Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.String Title  type has changed");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q29udGVudA==") /*"Content"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.String Content does not exists");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbnRlbnQ=") /*"get_Content"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Content() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Content() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Content() return type has changed");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbnRlbnQ=") /*"get_Content"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Content() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Content() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_Content() return type has changed");
                                propertyReturnType = property.PropertyType;
                                Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.String Content  type has changed");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q3JlYXRlZEF0") /*"CreatedAt"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.DateTime CreatedAt does not exists");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_CreatedAt() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_CreatedAt() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_CreatedAt() return type has changed");
                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_CreatedAt() does not exists");
                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_CreatedAt() is not public");
                                    methodReturnType = method.ReturnType;
                                    Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.get_CreatedAt() return type has changed");
                                propertyReturnType = property.PropertyType;
                                Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.DateTime CreatedAt  type has changed");
                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXBkYXRlZEF0") /*"UpdatedAt"*/ );
                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.Nullable`1 UpdatedAt does not exists");
                                    property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q29tbWVudHM=") /*"Comments"*/ );
                                    Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Post.IList`1 Comments does not exists");

                            type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("RUwuUG9zdERiSW5pdGlhbGl6ZXJgMQ==") /*"EL.PostDbInitializer`1"*/ );
                            Assert.IsNotNull(type, "Missing assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1");
                                Assert.IsTrue(type.IsClass, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1 is not class");
                                Assert.IsTrue(type.IsGenericType, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1 is not enum type");
                                Assert.IsTrue(type.IsPublic, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1 is not public class");
                                        method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("SW5pdGlhbGl6ZURhdGFiYXNl") /*"InitializeDatabase"*/ );                                        Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.InitializeDatabase(PostsContext context) does not exists");
                                        Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.InitializeDatabase(PostsContext context) is not public");
                                        Assert.IsTrue(method.IsVirtual, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.InitializeDatabase(PostsContext context) is not virtual");
                                        methodReturnType = method.ReturnType;
                                        Assert.AreEqual("System.Void",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.InitializeDatabase(PostsContext context) return type has changed");
                                            parametersCount = method.GetParameters().Length;
                                            Assert.AreEqual(1,parametersCount, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.InitializeDatabase(PostsContext context) parameters count has changed");
                                            parameter = method.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y29udGV4dA==") /*"context"*/  && x.ParameterType.FullName == "EL.PostsContext");
                                            Assert.IsNotNull(parameter, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.InitializeDatabase(PostsContext context) parameter context does not exists or does not have type EL.PostsContext");
                                    constructorParameterNameTypeDictionary = new List<string>();
                                        constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                                        Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1() does not exists");
                                        field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("VXNlcnNEYXRh") /*"UsersData"*/ );
                                        Assert.IsNotNull(field, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 UsersData does not exists");
                                        Assert.IsTrue(field.IsPublic, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 UsersData is not public");
                                        Assert.IsTrue(field.IsStatic, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 UsersData is not static");
                                        field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("UG9zdHNEYXRh") /*"PostsData"*/ );
                                        Assert.IsNotNull(field, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 PostsData does not exists");
                                        Assert.IsTrue(field.IsPublic, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 PostsData is not public");
                                        Assert.IsTrue(field.IsStatic, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 PostsData is not static");
                                        field = type.GetFields().FirstOrDefault(x=>x.Name == Decode("Q29tbWVudHNEYXRh") /*"CommentsData"*/ );
                                        Assert.IsNotNull(field, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 CommentsData does not exists");
                                        Assert.IsTrue(field.IsPublic, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 CommentsData is not public");
                                        Assert.IsTrue(field.IsStatic, "field: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostDbInitializer`1.IQueryable`1 CommentsData is not static");

                            type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("RUwuUG9zdHNDb250ZXh0") /*"EL.PostsContext"*/ );
                            Assert.IsNotNull(type, "Missing assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext");
                                Assert.IsTrue(type.IsClass, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext is not class");
                                Assert.IsTrue(type.IsPublic, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext is not public class");
                                        method = type.GetMethods().Where(m => !m.IsSpecialName).FirstOrDefault(x=>x.Name == Decode("RGlzcG9zZQ==") /*"Dispose"*/ );                                        Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext.Dispose() does not exists");
                                        Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext.Dispose() is not public");
                                        Assert.IsTrue(method.IsVirtual, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext.Dispose() is not virtual");
                                        methodReturnType = method.ReturnType;
                                        Assert.AreEqual("System.Void",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext.Dispose() return type has changed");
                                    constructorParameterNameTypeDictionary = new List<string>();
                                        constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                                        Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext() does not exists");
                                    constructorParameterNameTypeDictionary = new List<string>();
                                        constructorParameterNameTypeDictionary.Add("System.Data.Common.DbConnection");
                                        constructorParameterNameTypeDictionary.Add("System.Data.Entity.IDatabaseInitializer`1[[EL.PostsContext, EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");
                                        constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                                        Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext(DbConnection connectionIDatabaseInitializer`1 initializer) does not exists");
                                            parametersCount = constructor.GetParameters().Length;
                                            Assert.AreEqual(2,parametersCount, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext(DbConnection connectionIDatabaseInitializer`1 initializer)  parameters count has changed");
                                            parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("Y29ubmVjdGlvbg==") /*"connection"*/  && x.ParameterType.FullName == "System.Data.Common.DbConnection");
                                            Assert.IsNotNull(parameter, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext(DbConnection connectionIDatabaseInitializer`1 initializer) parameter connection does not exists or does not have type System.Data.Common.DbConnection");
                                            parametersCount = constructor.GetParameters().Length;
                                            Assert.AreEqual(2,parametersCount, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext(DbConnection connectionIDatabaseInitializer`1 initializer)  parameters count has changed");
                                            parameter = constructor.GetParameters().FirstOrDefault(x=>x.Name == Decode("aW5pdGlhbGl6ZXI=") /*"initializer"*/  && x.ParameterType.IsGenericType && x.ParameterType.FullName.StartsWith("System.Data.Entity.IDatabaseInitializer`1[[EL.PostsContext"));
                                            Assert.IsNotNull(parameter, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.PostsContext(DbConnection connectionIDatabaseInitializer`1 initializer) parameter initializer does not exists or does not have type System.Data.Entity.IDatabaseInitializer`1[[EL.PostsContext, EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]");

                            type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("RUwuVXNlcg==") /*"EL.User"*/ );
                            Assert.IsNotNull(type, "Missing assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User");
                                Assert.IsTrue(type.IsClass, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User is not class");
                                Assert.IsTrue(type.IsPublic, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User is not public class");
                                    constructorParameterNameTypeDictionary = new List<string>();
                                        constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                                        Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User() does not exists");
                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXNlcklk") /*"UserId"*/ );
                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.Int32 UserId does not exists");
                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_UserId() does not exists");
                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_UserId() is not public");
                                            methodReturnType = method.ReturnType;
                                            Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_UserId() return type has changed");
                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_UserId() does not exists");
                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_UserId() is not public");
                                            methodReturnType = method.ReturnType;
                                            Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_UserId() return type has changed");
                                        propertyReturnType = property.PropertyType;
                                        Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.Int32 UserId  type has changed");
                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Rmlyc3ROYW1l") /*"FirstName"*/ );
                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.String FirstName does not exists");
                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0ZpcnN0TmFtZQ==") /*"get_FirstName"*/ );                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_FirstName() does not exists");
                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_FirstName() is not public");
                                            methodReturnType = method.ReturnType;
                                            Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_FirstName() return type has changed");
                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0ZpcnN0TmFtZQ==") /*"get_FirstName"*/ );                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_FirstName() does not exists");
                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_FirstName() is not public");
                                            methodReturnType = method.ReturnType;
                                            Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_FirstName() return type has changed");
                                        propertyReturnType = property.PropertyType;
                                        Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.String FirstName  type has changed");
                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGFzdE5hbWU=") /*"LastName"*/ );
                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.String LastName does not exists");
                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xhc3ROYW1l") /*"get_LastName"*/ );                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_LastName() does not exists");
                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_LastName() is not public");
                                            methodReturnType = method.ReturnType;
                                            Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_LastName() return type has changed");
                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xhc3ROYW1l") /*"get_LastName"*/ );                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_LastName() does not exists");
                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_LastName() is not public");
                                            methodReturnType = method.ReturnType;
                                            Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_LastName() return type has changed");
                                        propertyReturnType = property.PropertyType;
                                        Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.String LastName  type has changed");
                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q3JlYXRlZEF0") /*"CreatedAt"*/ );
                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.DateTime CreatedAt does not exists");
                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_CreatedAt() does not exists");
                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_CreatedAt() is not public");
                                            methodReturnType = method.ReturnType;
                                            Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_CreatedAt() return type has changed");
                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_CreatedAt() does not exists");
                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_CreatedAt() is not public");
                                            methodReturnType = method.ReturnType;
                                            Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.get_CreatedAt() return type has changed");
                                        propertyReturnType = property.PropertyType;
                                        Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.DateTime CreatedAt  type has changed");
                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXBkYXRlZEF0") /*"UpdatedAt"*/ );
                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.User.Nullable`1 UpdatedAt does not exists");

                                type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("RUwuTW9kZWxzLkNvbW1lbnRNb2RlbA==") /*"EL.Models.CommentModel"*/ );
                                Assert.IsNotNull(type, "Missing assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel");
                                    Assert.IsTrue(type.IsClass, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel is not class");
                                    Assert.IsTrue(type.IsPublic, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel is not public class");
                                        constructorParameterNameTypeDictionary = new List<string>();
                                            constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                                            Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel() does not exists");
                                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.Int32 Id does not exists");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Id() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Id() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Id() return type has changed");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Id() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Id() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Id() return type has changed");
                                            propertyReturnType = property.PropertyType;
                                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.Int32 Id  type has changed");
                                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXNlcklk") /*"UserId"*/ );
                                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.Int32 UserId does not exists");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_UserId() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_UserId() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_UserId() return type has changed");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_UserId() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_UserId() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_UserId() return type has changed");
                                            propertyReturnType = property.PropertyType;
                                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.Int32 UserId  type has changed");
                                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("UG9zdElk") /*"PostId"*/ );
                                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.Int32 PostId does not exists");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Bvc3RJZA==") /*"get_PostId"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_PostId() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_PostId() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_PostId() return type has changed");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1Bvc3RJZA==") /*"get_PostId"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_PostId() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_PostId() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_PostId() return type has changed");
                                            propertyReturnType = property.PropertyType;
                                            Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.Int32 PostId  type has changed");
                                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q29udGVudA==") /*"Content"*/ );
                                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.String Content does not exists");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbnRlbnQ=") /*"get_Content"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Content() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Content() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Content() return type has changed");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbnRlbnQ=") /*"get_Content"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Content() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Content() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_Content() return type has changed");
                                            propertyReturnType = property.PropertyType;
                                            Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.String Content  type has changed");
                                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q3JlYXRlZEF0") /*"CreatedAt"*/ );
                                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.DateTime CreatedAt does not exists");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_CreatedAt() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_CreatedAt() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_CreatedAt() return type has changed");
                                                method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                                Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_CreatedAt() does not exists");
                                                Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_CreatedAt() is not public");
                                                methodReturnType = method.ReturnType;
                                                Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_CreatedAt() return type has changed");
                                            propertyReturnType = property.PropertyType;
                                            Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.DateTime CreatedAt  type has changed");
                                            property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXBkYXRlZEF0") /*"UpdatedAt"*/ );
                                            Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.Nullable`1 UpdatedAt does not exists");
                                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXNlcg==") /*"User"*/ );
                                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.UserModel User does not exists");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXI=") /*"get_User"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_User() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_User() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("EL.Models.UserModel",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_User() return type has changed");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXI=") /*"get_User"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_User() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_User() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("EL.Models.UserModel",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.get_User() return type has changed");
                                                propertyReturnType = property.PropertyType;
                                                Assert.AreEqual("EL.Models.UserModel",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.CommentModel.UserModel User  type has changed");

                                    type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("RUwuTW9kZWxzLlBvc3RNb2RlbA==") /*"EL.Models.PostModel"*/ );
                                    Assert.IsNotNull(type, "Missing assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel");
                                        Assert.IsTrue(type.IsClass, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel is not class");
                                        Assert.IsTrue(type.IsPublic, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel is not public class");
                                            constructorParameterNameTypeDictionary = new List<string>();
                                                constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                                                Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel() does not exists");
                                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.Int32 Id does not exists");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Id() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Id() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Id() return type has changed");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Id() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Id() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Id() return type has changed");
                                                propertyReturnType = property.PropertyType;
                                                Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.Int32 Id  type has changed");
                                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXNlcklk") /*"UserId"*/ );
                                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.Int32 UserId does not exists");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_UserId() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_UserId() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_UserId() return type has changed");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1VzZXJJZA==") /*"get_UserId"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_UserId() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_UserId() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_UserId() return type has changed");
                                                propertyReturnType = property.PropertyType;
                                                Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.Int32 UserId  type has changed");
                                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VGl0bGU=") /*"Title"*/ );
                                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.String Title does not exists");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1RpdGxl") /*"get_Title"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Title() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Title() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Title() return type has changed");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X1RpdGxl") /*"get_Title"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Title() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Title() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Title() return type has changed");
                                                propertyReturnType = property.PropertyType;
                                                Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.String Title  type has changed");
                                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q29udGVudA==") /*"Content"*/ );
                                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.String Content does not exists");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbnRlbnQ=") /*"get_Content"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Content() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Content() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Content() return type has changed");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NvbnRlbnQ=") /*"get_Content"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Content() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Content() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_Content() return type has changed");
                                                propertyReturnType = property.PropertyType;
                                                Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.String Content  type has changed");
                                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q3JlYXRlZEF0") /*"CreatedAt"*/ );
                                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.DateTime CreatedAt does not exists");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_CreatedAt() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_CreatedAt() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_CreatedAt() return type has changed");
                                                    method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                                    Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_CreatedAt() does not exists");
                                                    Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_CreatedAt() is not public");
                                                    methodReturnType = method.ReturnType;
                                                    Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.get_CreatedAt() return type has changed");
                                                propertyReturnType = property.PropertyType;
                                                Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.DateTime CreatedAt  type has changed");
                                                property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXBkYXRlZEF0") /*"UpdatedAt"*/ );
                                                Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.Nullable`1 UpdatedAt does not exists");
                                                    property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q29tbWVudHM=") /*"Comments"*/ );
                                                    Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.PostModel.IEnumerable`1 Comments does not exists");

                                            type = assembly.GetTypes().FirstOrDefault(x=>x.FullName == Decode("RUwuTW9kZWxzLlVzZXJNb2RlbA==") /*"EL.Models.UserModel"*/ );
                                            Assert.IsNotNull(type, "Missing assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel");
                                                Assert.IsTrue(type.IsClass, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel is not class");
                                                Assert.IsTrue(type.IsPublic, "assembly: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel is not public class");
                                                    constructorParameterNameTypeDictionary = new List<string>();
                                                        constructor = type.GetConstructors().FirstOrDefault(x=>x.GetParameters().Select(y=>y.ParameterType.FullName).SequenceEqual(constructorParameterNameTypeDictionary));
                                                        Assert.IsNotNull(constructor, "constructor: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel() does not exists");
                                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("SWQ=") /*"Id"*/ );
                                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.Int32 Id does not exists");
                                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_Id() does not exists");
                                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_Id() is not public");
                                                            methodReturnType = method.ReturnType;
                                                            Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_Id() return type has changed");
                                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0lk") /*"get_Id"*/ );                                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_Id() does not exists");
                                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_Id() is not public");
                                                            methodReturnType = method.ReturnType;
                                                            Assert.AreEqual("System.Int32",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_Id() return type has changed");
                                                        propertyReturnType = property.PropertyType;
                                                        Assert.AreEqual("System.Int32",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.Int32 Id  type has changed");
                                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Rmlyc3ROYW1l") /*"FirstName"*/ );
                                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.String FirstName does not exists");
                                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0ZpcnN0TmFtZQ==") /*"get_FirstName"*/ );                                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_FirstName() does not exists");
                                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_FirstName() is not public");
                                                            methodReturnType = method.ReturnType;
                                                            Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_FirstName() return type has changed");
                                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0ZpcnN0TmFtZQ==") /*"get_FirstName"*/ );                                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_FirstName() does not exists");
                                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_FirstName() is not public");
                                                            methodReturnType = method.ReturnType;
                                                            Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_FirstName() return type has changed");
                                                        propertyReturnType = property.PropertyType;
                                                        Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.String FirstName  type has changed");
                                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("TGFzdE5hbWU=") /*"LastName"*/ );
                                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.String LastName does not exists");
                                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xhc3ROYW1l") /*"get_LastName"*/ );                                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_LastName() does not exists");
                                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_LastName() is not public");
                                                            methodReturnType = method.ReturnType;
                                                            Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_LastName() return type has changed");
                                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0xhc3ROYW1l") /*"get_LastName"*/ );                                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_LastName() does not exists");
                                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_LastName() is not public");
                                                            methodReturnType = method.ReturnType;
                                                            Assert.AreEqual("System.String",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_LastName() return type has changed");
                                                        propertyReturnType = property.PropertyType;
                                                        Assert.AreEqual("System.String",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.String LastName  type has changed");
                                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("Q3JlYXRlZEF0") /*"CreatedAt"*/ );
                                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.DateTime CreatedAt does not exists");
                                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_CreatedAt() does not exists");
                                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_CreatedAt() is not public");
                                                            methodReturnType = method.ReturnType;
                                                            Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_CreatedAt() return type has changed");
                                                            method = type.GetMethods().FirstOrDefault(x=>x.Name == Decode("Z2V0X0NyZWF0ZWRBdA==") /*"get_CreatedAt"*/ );                                                            Assert.IsNotNull(method, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_CreatedAt() does not exists");
                                                            Assert.IsTrue(method.IsPublic, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_CreatedAt() is not public");
                                                            methodReturnType = method.ReturnType;
                                                            Assert.AreEqual("System.DateTime",methodReturnType.FullName, "method: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.get_CreatedAt() return type has changed");
                                                        propertyReturnType = property.PropertyType;
                                                        Assert.AreEqual("System.DateTime",propertyReturnType.FullName, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.DateTime CreatedAt  type has changed");
                                                        property = type.GetProperties().Union(type.GetProperties().Where(x=>type.GetInterfaces().SelectMany(y=>y.GetProperties().Select(s=>s.Name)).Any(y => y == x.Name))).FirstOrDefault(x=>x.Name == Decode("VXBkYXRlZEF0") /*"UpdatedAt"*/ );
                                                        Assert.IsNotNull(property, "property: EL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null:EL.Models.UserModel.Nullable`1 UpdatedAt does not exists");


        }

        /// <summary>
        /// !!! WARNING 
        /// !!! Project structure test.
        /// !!! DON'T CHANGE IT! 
        /// !!! Changes may cause the solution to be rejected.
        /// </summary>
        private string Decode(string text)
        {
            return System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(text));
        }
    }
}
